{"name":"Talk-test-frameworks","tagline":"Presentation about front-end tests frameworks given on Front In BH 2014","body":"UI Test Frameworks\r\n==================\r\n\r\n<br>\r\n\r\nJoão Lucas & Rafael Guedes\r\n\r\n<br />\r\n\r\nFront In BH - 2014\r\n\r\n----\r\n\r\n## Quem somos?\r\n\r\n#### Não, não somos mais uma dupla sertaneja!\r\n\r\n----\r\n\r\n## Quem somos?\r\n\r\n - **João Lucas Santana** ( @jlucasps )\r\n  - UI Engineer na Avenue Code\r\n  - Ruby e JavaScript developer\r\n  - Empreendedor por insistência\r\n\r\n - **Rafael Guedes** ( @rafaelmenta )\r\n  - UI Engineer na Avenue Code\r\n  - Desenvolvimento web desde 2007\r\n  - Testando em front-end desde 2013\r\n\r\n---\r\n\r\n## Cenário\r\n\r\n - Javascript mal estruturado\r\n - JS e CSS misturados com HTML\r\n - Péssima rastreabilidade, reusabilidade e manuntenabilidade\r\n\r\n<br />\r\n\r\nResumindo:\r\n\r\n **CAOS**\r\n\r\n----\r\n\r\n## Melhoramos\r\n\r\n - Separação do código\r\n - Abstração de esturutras JS (e CSS)\r\n - Frameworks!\r\n\r\n----\r\n\r\n## Aplicações complexas\r\n## trazem problemas complexos\r\n\r\nComo previni-los?\r\n\r\n---\r\n\r\n# Testes!\r\n\r\n> Os testes no código client-side passam a ter a mesma importância em relação ao server-side\r\n\r\n<br />\r\n\r\nSim. Isso também significa integrá-los ao processo de build.\r\n\r\n----\r\n\r\n## Testes em front-end\r\n\r\n![Diagrama básico de testes em front-end](img/test-diagram.png)\r\n\r\n----\r\n\r\n## Ferramentas de testes\r\n\r\n![Ferramentas de testes](img/tools.jpg)\r\n\r\n----\r\n\r\n## Ferramentas de testes\r\n\r\n[![Jasmine](img/jasmine.png)](http://jasmine.github.io/)\r\n\r\n- Matchers customizados, spies, async, clock\r\n\r\n```javascript\r\ndescribe(\"Calculator\", function() {\r\n  var calc;\r\n\r\n  beforeEach(function() {\r\n    calc = Calculator();\r\n  });\r\n\r\n  it('should sum two numbers', function() {\r\n    var result = calc.add(2, 3);\r\n    expect(result).toEqual(5);\r\n  });\r\n});\r\n```\r\n\r\n----\r\n\r\n## Ferramentas de testes\r\n\r\n[![QUnit](img/qunit.png)](http://qunitjs.com/)\r\n\r\n- jQuery project\r\n- Focado em testar Javascript no browser\r\n\r\n```javascript\r\nvar calc;\r\nmodule('Awesome module', {\r\n  setup: function() {\r\n    calc = new Calc();\r\n  },\r\n\r\n  teardown: function() { }\r\n});\r\n\r\ntest('sum', function( ) {\r\n  deepEqual(calc.sum(2, 4), 6, 'Description');\r\n  equal(calc.sum(2, 4), '6', 'Description');\r\n} );\r\n```\r\n\r\n----\r\n\r\n## Ferramentas de testes\r\n\r\n[![Mocha](img/mocha.png)](http://visionmedia.github.io/mocha/)\r\n\r\n- Framework flexível e modular para node.js e browser\r\n- Promise test, ```before``` & ```after``` hooks\r\n\r\n```javascript\r\ndescribe(\"a promise test\", function() {\r\n  before(function() { return db.save([mark, loki, jane]); });\r\n\r\n  it('should give me correct user count with callback', function(done) {\r\n    db.find({ type: 'User'}).then(function(data, err) {\r\n      data.length.should.equal(3);\r\n      done();\r\n    });\r\n  });\r\n\r\n  it('should give me correct user count with promise', function() {\r\n    db.find({ type: 'User' }).should.eventually.have.length(3);\r\n  });\r\n});\r\n```\r\n\r\n----\r\n\r\n## Ferramentas de testes\r\n\r\n[![Buster](img/buster.png)](http://docs.busterjs.org/en/latest/#)\r\n\r\n- Framework flexível e modular para node.js e browser\r\n- Integrado com Sinon.JS\r\n\r\n```javascript\r\nbuster.spec.expose();\r\ndescribe(\"My thing\", function () {\r\n\r\n  it(\"has the foo and bar\", function () {\r\n    expect(\"foo\").toEqual(\"bar\");\r\n  });\r\n\r\n  it(\"states the obvious\", function () {\r\n    expect(true).toBe(true);;\r\n  });\r\n\r\n});\r\n```\r\n\r\n----\r\n\r\n## Como escolher meu framework?\r\n\r\n - Estável\r\n - Comunidade\r\n - Compatível com tecnologias do projeto\r\n - Modular\r\n\r\n---\r\n\r\n## Ferramentas utilitárias\r\n\r\n[![Karma](img/karma.png)](http://karma-runner.github.io/)\r\n[![PhantomJS](img/phantomjs.png)](http://phantomjs.org/)\r\n[![Chai](img/chai.png)](http://chaijs.com/)\r\n[![BrowserStack](img/browserstack.png)](http://www.browserstack.com/)\r\n[![TestSwarm](img/testswarm.png)](http://testswarm.signalr.net/)\r\n[![Blanket.js](img/blanket.png)](http://blanketjs.org/)\r\n[![Sinon.js](img/sinonjs.png)](http://sinonjs.org/)\r\n\r\n----\r\n\r\n## Spies\r\n\r\n![Spies](img/spy.jpg)\r\n\r\n----\r\n\r\n## Spies\r\n\r\n- Funções que informam sobre funções executadas\r\n  - Chamadas\r\n  - Argumentos\r\n  - Contexto\r\n  - Retorno\r\n  - Exceções\r\n\r\n----\r\n\r\n## Stubs\r\n\r\n![Stubs](img/real-spy.jpg)\r\n\r\n----\r\n\r\n## Stubs\r\n\r\n- Spy com comportamento pré-estabelecido\r\n- ~Engana~ o fluxo do sistema\r\n  - Especialmente útil para código com dependências\r\n\r\n----\r\n\r\n## Mocks\r\n\r\n![Mocks](img/mocks.jpg)\r\n\r\n----\r\n\r\n## Mocks\r\n\r\n- Métodos com comportamento pré-estabelecido\r\n- Fazem seu código falhar se não forem executados corretamente\r\n\r\n----\r\n\r\n## Fakes\r\n\r\n![Fakes](img/fake.jpg)\r\n\r\n----\r\n\r\n## Fakes\r\n\r\n- Mais simples do que Mocks\r\n- Interface de objetos reais\r\n  - Ex: Google Maps object\r\n\r\n---\r\n\r\n## Mãos à massa\r\n\r\n![Show me, don't tell me](img/show-me.jpg)\r\n\r\n----\r\n\r\n## Cenário\r\n\r\nPlayer de música\r\n\r\n```javascript\r\nvar player = new Player(),    // Music player\r\n    song = new Song( 120 ),   // single song\r\n    playList = [              // playlist\r\n      new Song( 112 ),\r\n      new Song( 145 ),\r\n      new Song( 88 )\r\n    ];\r\n\r\nplayer.play( song );          // play and quit\r\n\r\nplayer.play( playList );      // play in sequence\r\n\r\n```\r\n\r\n----\r\n\r\n### Stack utlizada\r\n\r\n - Karma\r\n - Mocha\r\n - Chai (should)\r\n - Sinon.js\r\n\r\n----\r\n\r\n## Configurando o Karma\r\n\r\n```\r\nnpm install karma --save-dev\r\nnpm install -g karma-cli\r\n\r\n# Plugins\r\nnpm install\r\n> karma-mocha karma-chai karma-sinon karma-phantomjs-launcher\r\n> --save-dev\r\n```\r\n\r\n```\r\nkarma init\r\nkarma start\r\n```\r\n\r\n*karma.conf.js*\r\n\r\n```javascript\r\nmodule.exports = function(config) {\r\n  config.set({\r\n    // ...\r\n    frameworks: ['mocha', 'chai', 'sinon'],\r\n    files: [\r\n      'js/**/*.js',\r\n      'test/**/*.js'\r\n    ],\r\n    // ...\r\n```\r\n\r\n----\r\n\r\n## Criando o primeiro teste\r\n\r\ntest/test.js\r\n\r\n```javascript\r\ndescribe(\"My first test suite\", function() {\r\n\r\n  it('should fail', function() {\r\n    true.should.be.false;\r\n  });\r\n\r\n});\r\n```\r\n\r\n----\r\n\r\n## Criando os primeiros testes\r\n## (de verdade)\r\n\r\nArquivo ```js/song.js```\r\n\r\n```javascript\r\nvar Song = function( duration ) {\r\n  this.duration = duration;     // In seconds\r\n  this.isPlaying = false;\r\n};\r\n\r\nSong.prototype.play = function() {\r\n  this.isPlaying = true;      // Song is playing\r\n};\r\n```\r\n\r\n----\r\n\r\n## Criando os primeiros testes\r\n\r\nArquivo ```test/song.js```\r\n\r\n```describe```, ```beforeEach``` e ```expect().to.be.true```\r\n\r\n```javascript\r\ndescribe('Song', function() {\r\n  var song;\r\n\r\n  beforeEach( function() {\r\n    song = new Song( 154 );\r\n  });\r\n\r\n  it('should be a function', function() {\r\n    Song.should.be.a(\"function\");\r\n  });\r\n\r\n  it('should be playing after call play()', function() {\r\n    song.play();\r\n    expect(song.isPlaying).to.be.true;\r\n  });\r\n});\r\n```\r\n\r\n----\r\n\r\n## Comportamento assíncrono\r\n\r\nArquivo ```test/song.js```\r\n\r\n```javascript\r\nSong.prototype.play = function() {\r\n  var self = this;\r\n  this.isPlaying = true;                // Song is playing\r\n  this.timer = setTimeout( function() {\r\n    self.nextSong.call( self );         // Play next song\r\n  }, this.duration * 1000 );            // after X seconds\r\n};\r\n\r\nSong.prototype.nextSong = function( ) {\r\n  this.isPlaying = false;             // Song isn't playing\r\n  clearTimeout( this.timer );\r\n  this.player.playNext();             // Play next song\r\n};\r\n```\r\n\r\n----\r\n\r\n## Comportamento assíncrono\r\n\r\nComo verificar que ```nextSong()``` será chamada?\r\n\r\n```javascript\r\nSong.prototype.play = function() {\r\n  // ...\r\n  this.timer = setTimeout( function() {\r\n    self.nextSong.call( self );       // Async call\r\n  }, this.duration * 1000 );\r\n};\r\n\r\nSong.prototype.nextSong = function( ) {\r\n  // ...\r\n  this.player.playNext();             // Dependencies\r\n};\r\n```\r\n\r\n----\r\n\r\n## Clock e stubs\r\n\r\nSinon.js para alterar o clock e utilizar stubs\r\n\r\n```javascript\r\nvar song;\r\nbeforeEach( function() {\r\n  song = new Song( 120 ); // 2 minutes\r\n} );\r\n\r\nit( 'should call nextSong after X seconds', function( ) {\r\n  var clock = sinon.useFakeTimers();\r\n  sinon.stub( Song.prototype, 'nextSong' ); // Song.prototype\r\n\r\n  song.play();\r\n  clock.tick( song.duration * 1000 );\r\n\r\n  expect( song.nextSong.calledOnce ).to.be.true; // object song\r\n  clock.restore();\r\n} );\r\n\r\n```\r\n\r\n----\r\n\r\n## Spies\r\n\r\nClasse ```js/player.js```\r\n\r\n```javascript\r\nvar Player = function( ) {\r\n  this.currentSongIndex = -1;\r\n};\r\n\r\nPlayer.prototype.play = function( media ) {\r\n  if ( Array.isArray( media ) ) {\r\n    this.playList = media;            // Save playlist\r\n  } else if ( media instanceof Song ) {\r\n    this.singleSong = media;          // Save a single song\r\n  }\r\n  this.playNext();                    // Start playing\r\n};\r\n```\r\n\r\n----\r\n\r\n## Spies\r\n\r\nComo verificar que ```return currentSong;``` está correto?\r\n\r\n```javascript\r\nPlayer.prototype.playNext = function() {\r\n  var currentSong;\r\n  if ( /* single or playlist ? */ ) {\r\n\r\n    if ( this.singleSong ) {\r\n      // Save single song\r\n\r\n    } else if ( this.playList ) {\r\n\r\n      // Save from playlist\r\n    }\r\n\r\n    currentSong.play();             // Song will play\r\n  }\r\n  return currentSong;               // Return song playing\r\n};\r\n```\r\n\r\n\r\n----\r\n\r\n## Spies\r\n\r\nMétodo ```playNext()``` da class ```Player```\r\n\r\n```javascript\r\nPlayer.prototype.playNext = function() {\r\n  var currentSong;                    // Song to play\r\n  if ( this.singleSong || this.playList) {\r\n    this.currentSongIndex += 1;\r\n    if ( this.singleSong && this.currentSongIndex === 0 ) {\r\n      currentSong = this.singleSong;  // Play single song\r\n    } else if ( this.playList && this.currentSongIndex < this.playList.lenght ) {\r\n      currentSong = this.playList[this.currentSongIndex]; // From playlist\r\n    }\r\n    if ( currentSong instanceof Song ) {\r\n      currentSong.player = this;\r\n      currentSong.play();           // Song will play\r\n    }\r\n  }\r\n  return currentSong;               // Song playing\r\n};\r\n```\r\n\r\n----\r\n\r\n## Spies\r\n\r\nTestes com spies: ```test/player.js```\r\n\r\n```javascript\r\nit( 'should play the only song and exit the player', function() {\r\n  var clock = sinon.useFakeTimers(),\r\n      player = new Player(), song = new Song( 120 ),\r\n      playNextSpy = sinon.spy( player, 'playNext' ),\r\n      playSpy = sinon.spy(song, 'play');\r\n\r\n  player.play( song );\r\n  clock.tick( song.duration * 1000 );\r\n\r\n  expect( song.play.calledOnce ).to.be.true;\r\n  expect( playNextSpy.calledTwice ).to.be.true;\r\n  expect( playNextSpy.returnValues[0] ).to.deep.equal( song );\r\n  expect( playNextSpy.returnValues[1] ).to.deep.equal( undefined );\r\n\r\n  playNextSpy.restore();\r\n  clock.restore();\r\n});\r\n\r\n```\r\n\r\n---\r\n\r\n## Perguntas? Comentários?\r\n\r\n![Perguntas? Comentários?](img/questions.gif)\r\n\r\n----\r\n\r\n## UI Test Frameworks\r\n\r\n[![Avenue Code](img/avenuecode.jpg)](http://www.avenuecode.com.br/)\r\n\r\n```javascript\r\ndescribe( \"AVENUE CODE\", function() {\r\n  it( \"IS HIRING!\", function() {\r\n\r\n    expect( attendance ).to.send( CV.pdf );\r\n\r\n    expect( myself ).to.win( iPod.SHUFFLE );\r\n\r\n  } );\r\n} );\r\n\r\n```\r\n\r\n<br>\r\n\r\nJoão Lucas ( @jlucasps ) & Rafael Guedes ( @rafaelmenta )\r\n\r\nFront In BH - 2014\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}